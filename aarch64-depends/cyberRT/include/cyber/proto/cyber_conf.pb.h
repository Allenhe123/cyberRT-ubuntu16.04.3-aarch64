// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber_conf.proto

#ifndef PROTOBUF_cyber_5fconf_2eproto__INCLUDED
#define PROTOBUF_cyber_5fconf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "scheduler_conf.pb.h"
#include "transport_conf.pb.h"
#include "run_mode_conf.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_cyber_5fconf_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCyberConfigImpl();
void InitDefaultsCyberConfig();
inline void InitDefaults() {
  InitDefaultsCyberConfig();
}
}  // namespace protobuf_cyber_5fconf_2eproto
namespace apollo {
namespace cyber {
namespace proto {
class CyberConfig;
class CyberConfigDefaultTypeInternal;
extern CyberConfigDefaultTypeInternal _CyberConfig_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
namespace apollo {
namespace cyber {
namespace proto {

// ===================================================================

class CyberConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.CyberConfig) */ {
 public:
  CyberConfig();
  virtual ~CyberConfig();

  CyberConfig(const CyberConfig& from);

  inline CyberConfig& operator=(const CyberConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CyberConfig(CyberConfig&& from) noexcept
    : CyberConfig() {
    *this = ::std::move(from);
  }

  inline CyberConfig& operator=(CyberConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CyberConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CyberConfig* internal_default_instance() {
    return reinterpret_cast<const CyberConfig*>(
               &_CyberConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CyberConfig* other);
  friend void swap(CyberConfig& a, CyberConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CyberConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  CyberConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CyberConfig& from);
  void MergeFrom(const CyberConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CyberConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.cyber.proto.SchedulerConf scheduler_conf = 1;
  bool has_scheduler_conf() const;
  void clear_scheduler_conf();
  static const int kSchedulerConfFieldNumber = 1;
  const ::apollo::cyber::proto::SchedulerConf& scheduler_conf() const;
  ::apollo::cyber::proto::SchedulerConf* release_scheduler_conf();
  ::apollo::cyber::proto::SchedulerConf* mutable_scheduler_conf();
  void set_allocated_scheduler_conf(::apollo::cyber::proto::SchedulerConf* scheduler_conf);

  // optional .apollo.cyber.proto.TransportConf transport_conf = 2;
  bool has_transport_conf() const;
  void clear_transport_conf();
  static const int kTransportConfFieldNumber = 2;
  const ::apollo::cyber::proto::TransportConf& transport_conf() const;
  ::apollo::cyber::proto::TransportConf* release_transport_conf();
  ::apollo::cyber::proto::TransportConf* mutable_transport_conf();
  void set_allocated_transport_conf(::apollo::cyber::proto::TransportConf* transport_conf);

  // optional .apollo.cyber.proto.RunModeConf run_mode_conf = 3;
  bool has_run_mode_conf() const;
  void clear_run_mode_conf();
  static const int kRunModeConfFieldNumber = 3;
  const ::apollo::cyber::proto::RunModeConf& run_mode_conf() const;
  ::apollo::cyber::proto::RunModeConf* release_run_mode_conf();
  ::apollo::cyber::proto::RunModeConf* mutable_run_mode_conf();
  void set_allocated_run_mode_conf(::apollo::cyber::proto::RunModeConf* run_mode_conf);

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.CyberConfig)
 private:
  void set_has_scheduler_conf();
  void clear_has_scheduler_conf();
  void set_has_transport_conf();
  void clear_has_transport_conf();
  void set_has_run_mode_conf();
  void clear_has_run_mode_conf();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::apollo::cyber::proto::SchedulerConf* scheduler_conf_;
  ::apollo::cyber::proto::TransportConf* transport_conf_;
  ::apollo::cyber::proto::RunModeConf* run_mode_conf_;
  friend struct ::protobuf_cyber_5fconf_2eproto::TableStruct;
  friend void ::protobuf_cyber_5fconf_2eproto::InitDefaultsCyberConfigImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CyberConfig

// optional .apollo.cyber.proto.SchedulerConf scheduler_conf = 1;
inline bool CyberConfig::has_scheduler_conf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CyberConfig::set_has_scheduler_conf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CyberConfig::clear_has_scheduler_conf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::cyber::proto::SchedulerConf& CyberConfig::scheduler_conf() const {
  const ::apollo::cyber::proto::SchedulerConf* p = scheduler_conf_;
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.CyberConfig.scheduler_conf)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::cyber::proto::SchedulerConf*>(
      &::apollo::cyber::proto::_SchedulerConf_default_instance_);
}
inline ::apollo::cyber::proto::SchedulerConf* CyberConfig::release_scheduler_conf() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.CyberConfig.scheduler_conf)
  clear_has_scheduler_conf();
  ::apollo::cyber::proto::SchedulerConf* temp = scheduler_conf_;
  scheduler_conf_ = NULL;
  return temp;
}
inline ::apollo::cyber::proto::SchedulerConf* CyberConfig::mutable_scheduler_conf() {
  set_has_scheduler_conf();
  if (scheduler_conf_ == NULL) {
    scheduler_conf_ = new ::apollo::cyber::proto::SchedulerConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.CyberConfig.scheduler_conf)
  return scheduler_conf_;
}
inline void CyberConfig::set_allocated_scheduler_conf(::apollo::cyber::proto::SchedulerConf* scheduler_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scheduler_conf_);
  }
  if (scheduler_conf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scheduler_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scheduler_conf, submessage_arena);
    }
    set_has_scheduler_conf();
  } else {
    clear_has_scheduler_conf();
  }
  scheduler_conf_ = scheduler_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.CyberConfig.scheduler_conf)
}

// optional .apollo.cyber.proto.TransportConf transport_conf = 2;
inline bool CyberConfig::has_transport_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CyberConfig::set_has_transport_conf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CyberConfig::clear_has_transport_conf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::cyber::proto::TransportConf& CyberConfig::transport_conf() const {
  const ::apollo::cyber::proto::TransportConf* p = transport_conf_;
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.CyberConfig.transport_conf)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::cyber::proto::TransportConf*>(
      &::apollo::cyber::proto::_TransportConf_default_instance_);
}
inline ::apollo::cyber::proto::TransportConf* CyberConfig::release_transport_conf() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.CyberConfig.transport_conf)
  clear_has_transport_conf();
  ::apollo::cyber::proto::TransportConf* temp = transport_conf_;
  transport_conf_ = NULL;
  return temp;
}
inline ::apollo::cyber::proto::TransportConf* CyberConfig::mutable_transport_conf() {
  set_has_transport_conf();
  if (transport_conf_ == NULL) {
    transport_conf_ = new ::apollo::cyber::proto::TransportConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.CyberConfig.transport_conf)
  return transport_conf_;
}
inline void CyberConfig::set_allocated_transport_conf(::apollo::cyber::proto::TransportConf* transport_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(transport_conf_);
  }
  if (transport_conf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transport_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transport_conf, submessage_arena);
    }
    set_has_transport_conf();
  } else {
    clear_has_transport_conf();
  }
  transport_conf_ = transport_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.CyberConfig.transport_conf)
}

// optional .apollo.cyber.proto.RunModeConf run_mode_conf = 3;
inline bool CyberConfig::has_run_mode_conf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CyberConfig::set_has_run_mode_conf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CyberConfig::clear_has_run_mode_conf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::cyber::proto::RunModeConf& CyberConfig::run_mode_conf() const {
  const ::apollo::cyber::proto::RunModeConf* p = run_mode_conf_;
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.CyberConfig.run_mode_conf)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::cyber::proto::RunModeConf*>(
      &::apollo::cyber::proto::_RunModeConf_default_instance_);
}
inline ::apollo::cyber::proto::RunModeConf* CyberConfig::release_run_mode_conf() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.CyberConfig.run_mode_conf)
  clear_has_run_mode_conf();
  ::apollo::cyber::proto::RunModeConf* temp = run_mode_conf_;
  run_mode_conf_ = NULL;
  return temp;
}
inline ::apollo::cyber::proto::RunModeConf* CyberConfig::mutable_run_mode_conf() {
  set_has_run_mode_conf();
  if (run_mode_conf_ == NULL) {
    run_mode_conf_ = new ::apollo::cyber::proto::RunModeConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.CyberConfig.run_mode_conf)
  return run_mode_conf_;
}
inline void CyberConfig::set_allocated_run_mode_conf(::apollo::cyber::proto::RunModeConf* run_mode_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(run_mode_conf_);
  }
  if (run_mode_conf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      run_mode_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, run_mode_conf, submessage_arena);
    }
    set_has_run_mode_conf();
  } else {
    clear_has_run_mode_conf();
  }
  run_mode_conf_ = run_mode_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.CyberConfig.run_mode_conf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cyber_5fconf_2eproto__INCLUDED
